{"version":3,"sources":["components/Header/index.js","App.js","serviceWorker.js","index.js","logo.svg","assets/logo.png"],"names":["inputGroupStyle","backgroundColor","display","alignItems","width","boxSizing","borderRadius","inputStyle","border","outline","margin","height","fontSize","padding","Header","props","className","to","name","style","ShoppingOutlined","Group","type","icon","SearchOutlined","color","onClick","alert","shape","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"mOA0FMA,EAAkB,CACtBC,gBAAiB,OACjBC,QAAS,OACTC,WAAY,SACZC,MAAO,OAEPC,UAAW,aACXC,aAAc,GAGVC,EAAa,CACjBC,OAAQ,OACRC,QAAS,OACTC,OAAQ,EACRC,OAAQ,GACRP,MAAO,OACPQ,SAAU,GACVC,QAAS,UAKIC,EAxGA,SAACC,GACd,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,wBACb,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,kCAGA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,+BAGA,0BAAMA,UAAU,WAAhB,oBAEE,kBAAC,IAAD,CAASC,GAAG,KACV,8BAAUC,KAAK,kBACf,8BAAUA,KAAK,sBAIrB,yBAAKF,UAAU,4BACb,yBACEG,MAAO,CACLjB,QAAS,OACTS,OAAQ,OACRR,WAAY,SACZC,MAAO,UAGT,kBAACgB,EAAA,EAAD,CAAkBJ,UAAU,SAC5B,wBAAIA,UAAU,YAAd,aAGF,yBAAKA,UAAU,gBACb,kBAAC,IAAMK,MAAP,CAAaF,MAAOnB,GAClB,kBAAC,IAAD,CAAOmB,MAAOZ,IACd,kBAAC,IAAD,CACEe,KAAK,UACLC,KACE,kBAACC,EAAA,EAAD,CACEL,MAAO,CACLP,SAAU,GACVa,MAAO,sBAIbC,QAAS,kBAAMC,MAAM,cAIzB,yBAAKX,UAAU,aACb,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,sBAGA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,kBAGA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,qBAGA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,6BAGA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,gBAGA,kBAAC,IAAD,CAASC,GAAG,IAAID,UAAU,WAA1B,8BAOJ,kBAAC,IAAD,CACEM,KAAK,UACLM,MAAM,SACNL,KAAM,8BAAUL,KAAK,sBChEhBW,MAVf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,SCAYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.eb74d2be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport logo from \"../../assets/logo.png\";\r\nimport \"./header.scss\";\r\nimport { Input, Button, Badge } from \"antd\";\r\nimport { SearchOutlined, ShoppingOutlined } from \"@ant-design/icons\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"shoppeHeader\">\r\n      <div className=\"navBarWrap container\">\r\n        <NavLink to=\"#\" className=\"navLink\">\r\n          Kênh người bán\r\n        </NavLink>\r\n        <NavLink to=\"#\" className=\"navLink\">\r\n          Tải ứng dụng\r\n        </NavLink>\r\n        <span className=\"navLink\">\r\n          Kết nối\r\n          <NavLink to=\"#\">\r\n            <ion-icon name=\"logo-facebook\"></ion-icon>\r\n            <ion-icon name=\"logo-instagram\"></ion-icon>\r\n          </NavLink>\r\n        </span>\r\n      </div>\r\n      <div className=\"wrapLogoSearch container\">\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            height: \"100%\",\r\n            alignItems: \"center\",\r\n            width: \"350px\",\r\n          }}\r\n        >\r\n          <ShoppingOutlined className=\"logo\" />\r\n          <h2 className=\"textLogo\">My Shop </h2>\r\n        </div>\r\n\r\n        <div className=\"searchAndKey\">\r\n          <Input.Group style={inputGroupStyle}>\r\n            <Input style={inputStyle} />\r\n            <Button\r\n              type=\"primary\"\r\n              icon={\r\n                <SearchOutlined\r\n                  style={{\r\n                    fontSize: 25,\r\n                    color: \"rgb(246, 63, 46)\",\r\n                  }}\r\n                />\r\n              }\r\n              onClick={() => alert(\"button\")}\r\n            />\r\n          </Input.Group>\r\n\r\n          <div className=\"keySearch\">\r\n            <NavLink to=\"#\" className=\"navLink\">\r\n              áo khoác nam\r\n            </NavLink>\r\n            <NavLink to=\"#\" className=\"navLink\">\r\n              Sandal Nữ\r\n            </NavLink>\r\n            <NavLink to=\"#\" className=\"navLink\">\r\n              Giầy nữ\r\n            </NavLink>\r\n            <NavLink to=\"#\" className=\"navLink\">\r\n              sách kỹ năng\r\n            </NavLink>\r\n            <NavLink to=\"#\" className=\"navLink\">\r\n              Balo nữ\r\n            </NavLink>\r\n            <NavLink to=\"#\" className=\"navLink\">\r\n              áo thun tay ngắn\r\n            </NavLink>\r\n          </div>\r\n        </div>\r\n\r\n        {/* <Badge count={2}> */}\r\n        <Button\r\n          type=\"primary\"\r\n          shape=\"circle\"\r\n          icon={<ion-icon name=\"cart-outline\"></ion-icon>}\r\n        />\r\n        {/* </Badge> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst inputGroupStyle = {\r\n  backgroundColor: \"#fff\",\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  width: \"100%\",\r\n\r\n  boxSizing: \"border-box\",\r\n  borderRadius: 5,\r\n};\r\n\r\nconst inputStyle = {\r\n  border: \"none\",\r\n  outline: \"none\",\r\n  margin: 0,\r\n  height: 45,\r\n  width: \"100%\",\r\n  fontSize: 20,\r\n  padding: \"0 20px\",\r\n};\r\n\r\nHeader.propTypes = {};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport Home from \"./pages/Home\";\r\n\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <Header />\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.85be9e7c.png\";"],"sourceRoot":""}